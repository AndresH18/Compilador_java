## this is a comment
## it can be used to...comment


## keys {TOKEN, type, TYPE1, TYPE2, }


define
TOKEN : definition
TYPE: keyword
TYPE1 : definition

as
TOKEN : assigment
TYPE: keyword
TYPE1 : definition
;
TOKEN : finnish_statement
TYPE: end_statement
TYPE2 : assignment

class
TOKEN : class
TYPE: keyword

var
TOKEN : variable
TYPE: keyword

const
TOKEN : constant
TYPE: keyword

start
ID_TOKEN : 12
TOKEN : start_statement
TYPE: keyword

end
ID_TOKEN : 20
TOKEN : end_statement
TYPE: keyword

return
TOKEN : return
TYPE: keyword

void
TOKEN : void
TYPE: keyword
TYPE1 : return_type

while
TOKEN : while_statement
TYPE: keyword
TYPE1 : loop

for
TOKEN : for_statement
TYPE: keyword
TYPE1 : loop

do
TOKEN : do_statement
TYPE: keyword
TYPE1 : loop

if
TOKEN : if_statement
TYPE: keyword
TYPE1 : conditional

then
TOKEN : then_statement
TYPE: keyword
TYPE1 : conditional

else
TOKEN : else_statement
TYPE: keyword
TYPE1 : conditional

true
TOKEN : true_value
TYPE: keyword
TYPE1 : boolean

false
TOKEN : false_value
TYPE: keyword
TYPE1 : boolean

and
TOKEN : logical_and
TYPE: keyword
TYPE1 : boolean

or
TOKEN : logical_or
TYPE: keyword
TYPE1 : boolean

==
TOKEN : equal_to
TYPE: operator
TYPE1 : boolean

!= 
TOKEN : not_equal
TYPE: operator
TYPE1 : boolean

<
TOKEN : less_than
TYPE: operator
TYPE1 : boolean

>
TOKEN : greater_than
TYPE: operator
TYPE1 : boolean

<=
TOKEN : less_equal
TYPE: operator
TYPE1 : boolean

>=
TOKEN : greater_equal
TYPE: operator
TYPE1 : boolean

!
TOKEN : not
TYPE: operator
TYPE1 : boolean

+
TOKEN : plus
TYPE: operator
TYPE1 : addition
TYPE2 : concatenation

-
TOKEN : minus
TYPE: operator
TYPE1 : subtraction

*
TOKEN : asterisk
TYPE: operator
TYPE1 : multiply

/
TOKEN : slash
TYPE: operator
TYPE1 : division

=
TOKEN : equal
TYPE: operator
TYPE1 : assignment

## []
## TOKEN : array
## TYPE: array_operator
## symbol : [regex]
## regex : 0|[1-9][0-9]*

## ()
## TOKEN : parenthesis
## TYPE: grouper
## symbol : (regex)
## regex : [0-9a-zA-Z][0-9a-zA-Z]*

## ""
## TOKEN : quote
## TYPE: string
## TYPE1 : grouper
## symbol : "regex"
## regex : *

## ----------------

"
TOKEN : quote
TYPE: string_q
TYPE1 : grouper

(
TOKEN : opening_p
TYPE: grouper

)
TOKEN : closing_p
TYPE: grouper

## ----------------

0
TOKEN : zero
TYPE: number

1
TOKEN : one
TYPE: number

2
TOKEN : two
TYPE: number

3
TOKEN : three
TYPE: number

4
TOKEN : four
TYPE: number

5
TOKEN : five
TYPE: number

6
TOKEN : six
TYPE: number

7
TOKEN : seven
TYPE: number

8
TOKEN : eight
TYPE: number

9
TOKEN : nine
TYPE: number

\t
TOKEN : tap_h
TYPE: separator

int
TOKEN : integer

double
TOKEN : floating

string
TOKEN : string

bool
TOKEN : boolean
