## this is a comment
## it can be used to...comment


## keys {NAME, type, TYPE1, TYPE2, }

;
NAME : punto_coma
TYPE: end_statement

define
TYPE: keyword
TYPE1 : definition

as
TYPE: keyword
TYPE1 : definition
TYPE2 : assignment

class
TYPE: keyword

var
NAME : variable
TYPE: keyword

const
NAME : constant
TYPE: keyword

start
NAME : start_command
TYPE: keyword

end
NAME : end_command
TYPE: keyword

return
NAME : return 
TYPE: keyword

void
NAME : void
TYPE: keyword
TYPE1 : return_type

while
NAME : while_loop
TYPE: keyword
TYPE1 : loop

for
NAME : for_loop
TYPE: keyword
TYPE1 : loop

do
NAME : do
TYPE: keyword
TYPE1 : loop

if
NAME : if_statement
TYPE: keyword
TYPE1 : conditional

then
NAME : then
TYPE: keyword
TYPE1 : conditional

else
NAME : else_statement
TYPE: keyword
TYPE1 : conditional

true
NAME : true_value
TYPE: keyword
TYPE1 : boolean

false
NAME : false_value
TYPE: keyword
TYPE1 : boolean

and
NAME : logical_and
TYPE: keyword
TYPE1 : boolean

or
NAME : logical_or
TYPE: keyword
TYPE1 : boolean

==
NAME : equal_to
TYPE: operator
TYPE1 : boolean

!= 
NAME : not_equal
TYPE: operator
TYPE1 : boolean

<
NAME : less_than
TYPE: operator
TYPE1 : boolean

>
NAME : greater_than
TYPE: operator
TYPE1 : boolean

<=
NAME : less_equal
TYPE: operator
TYPE1 : boolean

>=
NAME : greater_equal
TYPE: operator
TYPE1 : boolean

!
NAME : not
TYPE: operator
TYPE1 : boolean

+
NAME : plus
TYPE: operator
TYPE1 : addition
TYPE2 : concatenation

-
NAME : minus
TYPE: operator
TYPE1 : subtraction

*
NAME : asterisk
TYPE: operator
TYPE1 : multiply

/
NAME : slash
TYPE: operator
TYPE1 : division

=
NAME : equal
TYPE: operator
TYPE1 : assignment

## []
## NAME : array
## TYPE: array_operator
## symbol : [regex]
## regex : 0|[1-9][0-9]*

## ()
## NAME : parenthesis
## TYPE: grouper
## symbol : (regex)
## regex : [0-9a-zA-Z][0-9a-zA-Z]*

## ""
## NAME : quote
## TYPE: string
## TYPE1 : grouper
## symbol : "regex"
## regex : *

## ----------------

"
NAME : quote
TYPE: string_q
TYPE1 : grouper

(
NAME : opening_p
TYPE: grouper

)
NAME : closing_p
TYPE: grouper

## ----------------

0
NAME : zero
TYPE: number

1
NAME : one
TYPE: number

2
NAME : two
TYPE: number

3
NAME : three
TYPE: number

4
NAME : four
TYPE: number

5
NAME : five
TYPE: number

6
NAME : six
TYPE: number

7
NAME : seven
TYPE: number

8
NAME : eight
TYPE: number

9
NAME : nine
TYPE: number

\t
NAME : tap_h
TYPE: separator

int
NAME : integer

double
NAME : floating

string
NAME : string

bool
NAME : boolean
